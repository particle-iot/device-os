/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Fri Dec  1 16:41:03 2017. */

#ifndef PB_PARTICLE_CTRL_COMMON_PB_H_INCLUDED
#define PB_PARTICLE_CTRL_COMMON_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _particle_ctrl_IPAddress_Protocol {
    particle_ctrl_IPAddress_Protocol_NONE = 0,
    particle_ctrl_IPAddress_Protocol_IPv4 = 1,
    particle_ctrl_IPAddress_Protocol_IPv6 = 2
} particle_ctrl_IPAddress_Protocol;
#define _particle_ctrl_IPAddress_Protocol_MIN particle_ctrl_IPAddress_Protocol_NONE
#define _particle_ctrl_IPAddress_Protocol_MAX particle_ctrl_IPAddress_Protocol_IPv6
#define _particle_ctrl_IPAddress_Protocol_ARRAYSIZE ((particle_ctrl_IPAddress_Protocol)(particle_ctrl_IPAddress_Protocol_IPv6+1))

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(16) particle_ctrl_IPAddress_address_t;
typedef struct _particle_ctrl_IPAddress {
    particle_ctrl_IPAddress_Protocol protocol;
    particle_ctrl_IPAddress_address_t address;
/* @@protoc_insertion_point(struct:particle_ctrl_IPAddress) */
} particle_ctrl_IPAddress;

/* Default values for struct fields */

/* Initializer values for message structs */
#define particle_ctrl_IPAddress_init_default     {(particle_ctrl_IPAddress_Protocol)0, {0, {0}}}
#define particle_ctrl_IPAddress_init_zero        {(particle_ctrl_IPAddress_Protocol)0, {0, {0}}}

/* Field tags (for use in manual encoding/decoding) */
#define particle_ctrl_IPAddress_protocol_tag     1
#define particle_ctrl_IPAddress_address_tag      2

/* Struct field encoding specification for nanopb */
extern const pb_field_t particle_ctrl_IPAddress_fields[3];

/* Maximum encoded size of messages (where known) */
#define particle_ctrl_IPAddress_size             20

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define COMMON_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
