/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Mon Jan 22 19:44:54 2018. */

#ifndef PB_PARTICLE_CTRL_CONFIG_PB_H_INCLUDED
#define PB_PARTICLE_CTRL_CONFIG_PB_H_INCLUDED
#include <pb.h>

#include "common.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _particle_ctrl_SecurityKeyType {
    particle_ctrl_SecurityKeyType_INVALID_SECURITY_KEY = 0,
    particle_ctrl_SecurityKeyType_TCP_DEVICE_PRIVATE_KEY = 1,
    particle_ctrl_SecurityKeyType_TCP_DEVICE_PUBLIC_KEY = 2,
    particle_ctrl_SecurityKeyType_TCP_SERVER_PUBLIC_KEY = 3,
    particle_ctrl_SecurityKeyType_UDP_DEVICE_PRIVATE_KEY = 4,
    particle_ctrl_SecurityKeyType_UDP_DEVICE_PUBLIC_KEY = 5,
    particle_ctrl_SecurityKeyType_UDP_SERVER_PUBLIC_KEY = 6
} particle_ctrl_SecurityKeyType;
#define _particle_ctrl_SecurityKeyType_MIN particle_ctrl_SecurityKeyType_INVALID_SECURITY_KEY
#define _particle_ctrl_SecurityKeyType_MAX particle_ctrl_SecurityKeyType_UDP_SERVER_PUBLIC_KEY
#define _particle_ctrl_SecurityKeyType_ARRAYSIZE ((particle_ctrl_SecurityKeyType)(particle_ctrl_SecurityKeyType_UDP_SERVER_PUBLIC_KEY+1))

typedef enum _particle_ctrl_ServerProtocolType {
    particle_ctrl_ServerProtocolType_INVALID_PROTOCOL = 0,
    particle_ctrl_ServerProtocolType_TCP_PROTOCOL = 1,
    particle_ctrl_ServerProtocolType_UDP_PROTOCOL = 2
} particle_ctrl_ServerProtocolType;
#define _particle_ctrl_ServerProtocolType_MIN particle_ctrl_ServerProtocolType_INVALID_PROTOCOL
#define _particle_ctrl_ServerProtocolType_MAX particle_ctrl_ServerProtocolType_UDP_PROTOCOL
#define _particle_ctrl_ServerProtocolType_ARRAYSIZE ((particle_ctrl_ServerProtocolType)(particle_ctrl_ServerProtocolType_UDP_PROTOCOL+1))

/* Struct definitions */
typedef struct _particle_ctrl_GetSecurityKeyReply {
    pb_callback_t data;
/* @@protoc_insertion_point(struct:particle_ctrl_GetSecurityKeyReply) */
} particle_ctrl_GetSecurityKeyReply;

typedef struct _particle_ctrl_GetServerProtocolRequest {
    char dummy_field;
/* @@protoc_insertion_point(struct:particle_ctrl_GetServerProtocolRequest) */
} particle_ctrl_GetServerProtocolRequest;

typedef struct _particle_ctrl_IsClaimedRequest {
    char dummy_field;
/* @@protoc_insertion_point(struct:particle_ctrl_IsClaimedRequest) */
} particle_ctrl_IsClaimedRequest;

typedef struct _particle_ctrl_SetClaimCodeReply {
    char dummy_field;
/* @@protoc_insertion_point(struct:particle_ctrl_SetClaimCodeReply) */
} particle_ctrl_SetClaimCodeReply;

typedef struct _particle_ctrl_SetSecurityKeyReply {
    char dummy_field;
/* @@protoc_insertion_point(struct:particle_ctrl_SetSecurityKeyReply) */
} particle_ctrl_SetSecurityKeyReply;

typedef struct _particle_ctrl_SetServerAddressReply {
    char dummy_field;
/* @@protoc_insertion_point(struct:particle_ctrl_SetServerAddressReply) */
} particle_ctrl_SetServerAddressReply;

typedef struct _particle_ctrl_SetServerProtocolReply {
    char dummy_field;
/* @@protoc_insertion_point(struct:particle_ctrl_SetServerProtocolReply) */
} particle_ctrl_SetServerProtocolReply;

typedef struct _particle_ctrl_SetSoftApSsidReply {
    char dummy_field;
/* @@protoc_insertion_point(struct:particle_ctrl_SetSoftApSsidReply) */
} particle_ctrl_SetSoftApSsidReply;

typedef struct _particle_ctrl_GetSecurityKeyRequest {
    particle_ctrl_SecurityKeyType type;
/* @@protoc_insertion_point(struct:particle_ctrl_GetSecurityKeyRequest) */
} particle_ctrl_GetSecurityKeyRequest;

typedef struct _particle_ctrl_GetServerAddressReply {
    pb_callback_t address;
    int32_t port;
/* @@protoc_insertion_point(struct:particle_ctrl_GetServerAddressReply) */
} particle_ctrl_GetServerAddressReply;

typedef struct _particle_ctrl_GetServerAddressRequest {
    particle_ctrl_ServerProtocolType protocol;
/* @@protoc_insertion_point(struct:particle_ctrl_GetServerAddressRequest) */
} particle_ctrl_GetServerAddressRequest;

typedef struct _particle_ctrl_GetServerProtocolReply {
    particle_ctrl_ServerProtocolType protocol;
/* @@protoc_insertion_point(struct:particle_ctrl_GetServerProtocolReply) */
} particle_ctrl_GetServerProtocolReply;

typedef struct _particle_ctrl_IsClaimedReply {
    bool claimed;
/* @@protoc_insertion_point(struct:particle_ctrl_IsClaimedReply) */
} particle_ctrl_IsClaimedReply;

typedef struct _particle_ctrl_SetClaimCodeRequest {
    char code[64];
/* @@protoc_insertion_point(struct:particle_ctrl_SetClaimCodeRequest) */
} particle_ctrl_SetClaimCodeRequest;

typedef struct _particle_ctrl_SetSecurityKeyRequest {
    particle_ctrl_SecurityKeyType type;
    pb_callback_t data;
/* @@protoc_insertion_point(struct:particle_ctrl_SetSecurityKeyRequest) */
} particle_ctrl_SetSecurityKeyRequest;

typedef struct _particle_ctrl_SetServerAddressRequest {
    particle_ctrl_ServerProtocolType protocol;
    char address[64];
    int32_t port;
/* @@protoc_insertion_point(struct:particle_ctrl_SetServerAddressRequest) */
} particle_ctrl_SetServerAddressRequest;

typedef struct _particle_ctrl_SetServerProtocolRequest {
    particle_ctrl_ServerProtocolType protocol;
/* @@protoc_insertion_point(struct:particle_ctrl_SetServerProtocolRequest) */
} particle_ctrl_SetServerProtocolRequest;

typedef struct _particle_ctrl_SetSoftApSsidRequest {
    char prefix[32];
    char suffix[16];
/* @@protoc_insertion_point(struct:particle_ctrl_SetSoftApSsidRequest) */
} particle_ctrl_SetSoftApSsidRequest;

/* Default values for struct fields */

/* Initializer values for message structs */
#define particle_ctrl_SetClaimCodeRequest_init_default {""}
#define particle_ctrl_SetClaimCodeReply_init_default {0}
#define particle_ctrl_IsClaimedRequest_init_default {0}
#define particle_ctrl_IsClaimedReply_init_default {0}
#define particle_ctrl_SetSecurityKeyRequest_init_default {(particle_ctrl_SecurityKeyType)0, {{NULL}, NULL}}
#define particle_ctrl_SetSecurityKeyReply_init_default {0}
#define particle_ctrl_GetSecurityKeyRequest_init_default {(particle_ctrl_SecurityKeyType)0}
#define particle_ctrl_GetSecurityKeyReply_init_default {{{NULL}, NULL}}
#define particle_ctrl_SetServerAddressRequest_init_default {(particle_ctrl_ServerProtocolType)0, "", 0}
#define particle_ctrl_SetServerAddressReply_init_default {0}
#define particle_ctrl_GetServerAddressRequest_init_default {(particle_ctrl_ServerProtocolType)0}
#define particle_ctrl_GetServerAddressReply_init_default {{{NULL}, NULL}, 0}
#define particle_ctrl_SetServerProtocolRequest_init_default {(particle_ctrl_ServerProtocolType)0}
#define particle_ctrl_SetServerProtocolReply_init_default {0}
#define particle_ctrl_GetServerProtocolRequest_init_default {0}
#define particle_ctrl_GetServerProtocolReply_init_default {(particle_ctrl_ServerProtocolType)0}
#define particle_ctrl_SetSoftApSsidRequest_init_default {"", ""}
#define particle_ctrl_SetSoftApSsidReply_init_default {0}
#define particle_ctrl_SetClaimCodeRequest_init_zero {""}
#define particle_ctrl_SetClaimCodeReply_init_zero {0}
#define particle_ctrl_IsClaimedRequest_init_zero {0}
#define particle_ctrl_IsClaimedReply_init_zero   {0}
#define particle_ctrl_SetSecurityKeyRequest_init_zero {(particle_ctrl_SecurityKeyType)0, {{NULL}, NULL}}
#define particle_ctrl_SetSecurityKeyReply_init_zero {0}
#define particle_ctrl_GetSecurityKeyRequest_init_zero {(particle_ctrl_SecurityKeyType)0}
#define particle_ctrl_GetSecurityKeyReply_init_zero {{{NULL}, NULL}}
#define particle_ctrl_SetServerAddressRequest_init_zero {(particle_ctrl_ServerProtocolType)0, "", 0}
#define particle_ctrl_SetServerAddressReply_init_zero {0}
#define particle_ctrl_GetServerAddressRequest_init_zero {(particle_ctrl_ServerProtocolType)0}
#define particle_ctrl_GetServerAddressReply_init_zero {{{NULL}, NULL}, 0}
#define particle_ctrl_SetServerProtocolRequest_init_zero {(particle_ctrl_ServerProtocolType)0}
#define particle_ctrl_SetServerProtocolReply_init_zero {0}
#define particle_ctrl_GetServerProtocolRequest_init_zero {0}
#define particle_ctrl_GetServerProtocolReply_init_zero {(particle_ctrl_ServerProtocolType)0}
#define particle_ctrl_SetSoftApSsidRequest_init_zero {"", ""}
#define particle_ctrl_SetSoftApSsidReply_init_zero {0}

/* Field tags (for use in manual encoding/decoding) */
#define particle_ctrl_GetSecurityKeyReply_data_tag 1
#define particle_ctrl_GetSecurityKeyRequest_type_tag 1
#define particle_ctrl_GetServerAddressReply_address_tag 1
#define particle_ctrl_GetServerAddressReply_port_tag 2
#define particle_ctrl_GetServerAddressRequest_protocol_tag 1
#define particle_ctrl_GetServerProtocolReply_protocol_tag 1
#define particle_ctrl_IsClaimedReply_claimed_tag 1
#define particle_ctrl_SetClaimCodeRequest_code_tag 1
#define particle_ctrl_SetSecurityKeyRequest_type_tag 1
#define particle_ctrl_SetSecurityKeyRequest_data_tag 2
#define particle_ctrl_SetServerAddressRequest_protocol_tag 1
#define particle_ctrl_SetServerAddressRequest_address_tag 2
#define particle_ctrl_SetServerAddressRequest_port_tag 3
#define particle_ctrl_SetServerProtocolRequest_protocol_tag 1
#define particle_ctrl_SetSoftApSsidRequest_prefix_tag 1
#define particle_ctrl_SetSoftApSsidRequest_suffix_tag 2

/* Struct field encoding specification for nanopb */
extern const pb_field_t particle_ctrl_SetClaimCodeRequest_fields[2];
extern const pb_field_t particle_ctrl_SetClaimCodeReply_fields[1];
extern const pb_field_t particle_ctrl_IsClaimedRequest_fields[1];
extern const pb_field_t particle_ctrl_IsClaimedReply_fields[2];
extern const pb_field_t particle_ctrl_SetSecurityKeyRequest_fields[3];
extern const pb_field_t particle_ctrl_SetSecurityKeyReply_fields[1];
extern const pb_field_t particle_ctrl_GetSecurityKeyRequest_fields[2];
extern const pb_field_t particle_ctrl_GetSecurityKeyReply_fields[2];
extern const pb_field_t particle_ctrl_SetServerAddressRequest_fields[4];
extern const pb_field_t particle_ctrl_SetServerAddressReply_fields[1];
extern const pb_field_t particle_ctrl_GetServerAddressRequest_fields[2];
extern const pb_field_t particle_ctrl_GetServerAddressReply_fields[3];
extern const pb_field_t particle_ctrl_SetServerProtocolRequest_fields[2];
extern const pb_field_t particle_ctrl_SetServerProtocolReply_fields[1];
extern const pb_field_t particle_ctrl_GetServerProtocolRequest_fields[1];
extern const pb_field_t particle_ctrl_GetServerProtocolReply_fields[2];
extern const pb_field_t particle_ctrl_SetSoftApSsidRequest_fields[3];
extern const pb_field_t particle_ctrl_SetSoftApSsidReply_fields[1];

/* Maximum encoded size of messages (where known) */
#define particle_ctrl_SetClaimCodeRequest_size   66
#define particle_ctrl_SetClaimCodeReply_size     0
#define particle_ctrl_IsClaimedRequest_size      0
#define particle_ctrl_IsClaimedReply_size        2
/* particle_ctrl_SetSecurityKeyRequest_size depends on runtime parameters */
#define particle_ctrl_SetSecurityKeyReply_size   0
#define particle_ctrl_GetSecurityKeyRequest_size 2
/* particle_ctrl_GetSecurityKeyReply_size depends on runtime parameters */
#define particle_ctrl_SetServerAddressRequest_size 79
#define particle_ctrl_SetServerAddressReply_size 0
#define particle_ctrl_GetServerAddressRequest_size 2
/* particle_ctrl_GetServerAddressReply_size depends on runtime parameters */
#define particle_ctrl_SetServerProtocolRequest_size 2
#define particle_ctrl_SetServerProtocolReply_size 0
#define particle_ctrl_GetServerProtocolRequest_size 0
#define particle_ctrl_GetServerProtocolReply_size 2
#define particle_ctrl_SetSoftApSsidRequest_size  52
#define particle_ctrl_SetSoftApSsidReply_size    0

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define CONFIG_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
