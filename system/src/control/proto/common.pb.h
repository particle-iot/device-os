/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Tue Jan 29 21:26:45 2019. */

#ifndef PB_PARTICLE_CTRL_COMMON_PB_H_INCLUDED
#define PB_PARTICLE_CTRL_COMMON_PB_H_INCLUDED
#include <pb.h>

#include "extensions.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _particle_ctrl_ResultCode {
    particle_ctrl_ResultCode_OK = 0,
    particle_ctrl_ResultCode_NOT_ALLOWED = 1,
    particle_ctrl_ResultCode_TIMEOUT = 2,
    particle_ctrl_ResultCode_NOT_FOUND = 3,
    particle_ctrl_ResultCode_ALREADY_EXIST = 4,
    particle_ctrl_ResultCode_INVALID_STATE = 5,
    particle_ctrl_ResultCode_NO_MEMORY = 6,
    particle_ctrl_ResultCode_INVALID_PARAM = 7
} particle_ctrl_ResultCode;
#define _particle_ctrl_ResultCode_MIN particle_ctrl_ResultCode_OK
#define _particle_ctrl_ResultCode_MAX particle_ctrl_ResultCode_INVALID_PARAM
#define _particle_ctrl_ResultCode_ARRAYSIZE ((particle_ctrl_ResultCode)(particle_ctrl_ResultCode_INVALID_PARAM+1))

typedef enum _particle_ctrl_IPAddress_Protocol {
    particle_ctrl_IPAddress_Protocol_NONE = 0,
    particle_ctrl_IPAddress_Protocol_IPv4 = 1,
    particle_ctrl_IPAddress_Protocol_IPv6 = 2
} particle_ctrl_IPAddress_Protocol;
#define _particle_ctrl_IPAddress_Protocol_MIN particle_ctrl_IPAddress_Protocol_NONE
#define _particle_ctrl_IPAddress_Protocol_MAX particle_ctrl_IPAddress_Protocol_IPv6
#define _particle_ctrl_IPAddress_Protocol_ARRAYSIZE ((particle_ctrl_IPAddress_Protocol)(particle_ctrl_IPAddress_Protocol_IPv6+1))

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(16) particle_ctrl_IPAddress_address_t;
typedef struct _particle_ctrl_IPAddress {
    particle_ctrl_IPAddress_Protocol protocol;
    particle_ctrl_IPAddress_address_t address;
/* @@protoc_insertion_point(struct:particle_ctrl_IPAddress) */
} particle_ctrl_IPAddress;

typedef struct _particle_ctrl_Ipv4Address {
    uint32_t address;
/* @@protoc_insertion_point(struct:particle_ctrl_Ipv4Address) */
} particle_ctrl_Ipv4Address;

typedef struct _particle_ctrl_Ipv6Address {
    pb_byte_t address[16];
/* @@protoc_insertion_point(struct:particle_ctrl_Ipv6Address) */
} particle_ctrl_Ipv6Address;

typedef struct _particle_ctrl_IpAddress {
    pb_size_t which_address;
    union {
        particle_ctrl_Ipv4Address v4;
        particle_ctrl_Ipv6Address v6;
    } address;
/* @@protoc_insertion_point(struct:particle_ctrl_IpAddress) */
} particle_ctrl_IpAddress;

/* Default values for struct fields */

/* Initializer values for message structs */
#define particle_ctrl_Ipv4Address_init_default   {0}
#define particle_ctrl_Ipv6Address_init_default   {{0}}
#define particle_ctrl_IpAddress_init_default     {0, {particle_ctrl_Ipv4Address_init_default}}
#define particle_ctrl_IPAddress_init_default     {(particle_ctrl_IPAddress_Protocol)0, {0, {0}}}
#define particle_ctrl_Ipv4Address_init_zero      {0}
#define particle_ctrl_Ipv6Address_init_zero      {{0}}
#define particle_ctrl_IpAddress_init_zero        {0, {particle_ctrl_Ipv4Address_init_zero}}
#define particle_ctrl_IPAddress_init_zero        {(particle_ctrl_IPAddress_Protocol)0, {0, {0}}}

/* Field tags (for use in manual encoding/decoding) */
#define particle_ctrl_IPAddress_protocol_tag     1
#define particle_ctrl_IPAddress_address_tag      2
#define particle_ctrl_Ipv4Address_address_tag    1
#define particle_ctrl_Ipv6Address_address_tag    1
#define particle_ctrl_IpAddress_v4_tag           1
#define particle_ctrl_IpAddress_v6_tag           2

/* Struct field encoding specification for nanopb */
extern const pb_field_t particle_ctrl_Ipv4Address_fields[2];
extern const pb_field_t particle_ctrl_Ipv6Address_fields[2];
extern const pb_field_t particle_ctrl_IpAddress_fields[3];
extern const pb_field_t particle_ctrl_IPAddress_fields[3];

/* Maximum encoded size of messages (where known) */
#define particle_ctrl_Ipv4Address_size           5
#define particle_ctrl_Ipv6Address_size           18
#define particle_ctrl_IpAddress_size             20
#define particle_ctrl_IPAddress_size             20

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define COMMON_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
