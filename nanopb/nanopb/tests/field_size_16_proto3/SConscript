# Version of AllTypes test case for protobuf 3 file format.

Import("env")

import re
match = None
if 'PROTOC_VERSION' in env:
    match = re.search('([0-9]+).([0-9]+).([0-9]+)', env['PROTOC_VERSION'])

if match:
    version = map(int, match.groups())

# proto3 syntax is supported by protoc >= 3.0.0
if env.GetOption('clean') or (match and version[0] >= 3):

    env.NanopbProto(["alltypes", "alltypes.options"])

    # Define the compilation options
    opts = env.Clone()
    opts.Append(CPPDEFINES = {'PB_FIELD_16BIT': 1})

    # Build new version of core
    strict = opts.Clone()
    strict.Append(CFLAGS = strict['CORECFLAGS'])
    strict.Object("pb_decode_fields16.o", "$NANOPB/pb_decode.c")
    strict.Object("pb_encode_fields16.o", "$NANOPB/pb_encode.c")
    strict.Object("pb_common_fields16.o", "$NANOPB/pb_common.c")

    # Now build and run the test normally.
    enc = opts.Program(["encode_alltypes.c", "alltypes.pb.c", "pb_encode_fields16.o", "pb_common_fields16.o"])
    dec = opts.Program(["decode_alltypes.c", "alltypes.pb.c", "pb_decode_fields16.o", "pb_common_fields16.o"])

    env.RunTest(enc)
    env.RunTest([dec, "encode_alltypes.output"])
